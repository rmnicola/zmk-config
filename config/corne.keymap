/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        ESC_NUM {
            bindings = <&lt 2 ESCAPE>;
            key-positions = <19 20>;
            layers = <0>;
        };

        RET_NUM {
            bindings = <&lt 2 RET>;
            key-positions = <16 15>;
            layers = <0>;
        };

        FG {
            bindings = <&mo 0>;
            key-positions = <4 5>;
            layers = <0>;
        };

        DELWORD {
            bindings = <&kp LC(RC(BACKSPACE))>;
            key-positions = <40 41>;
        };
    };

    behaviors {
        HOMEROW: HOMEROW {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        TILDE_LAYER: TILDE_LAYER {
            compatible = "zmk,behavior-hold-tap";
            label = "TILDE_LAYER";
            bindings = <&mo>, <&M_QUOTE>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        M_QUOTE: QUOTES {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS &kp SPACE>;
            label = "' ", ";
        };

        M_CARET: M_CARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "M_CARET";
        };

        M_GRAVE: M_GRAVE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "M_GRAVE";
        };

        ATILDE: ATILDE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp A>;
            label = "ATILDE";
        };

        ACARET: ACARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp A>;
            label = "ACARET";
        };

        ECARET: ECARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp E>;
            label = "ECARET";
        };

        OCARET: OCARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp O>;
            label = "OCARET";
        };

        OTILDE: OTILDE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp O>;
            label = "OTILDE";
        };M_TILDE: M_TILDE {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp TILDE &kp SPACE>;
         label = "M_TILDE";};M_DQUOTE: M_DQUOTE {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
         label = "M_DQUOTE";};
    };

    
macros {};

behaviors {};

macros {};

behaviors {};

macros {};

behaviors {};
keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESCAPE  &kp Q                 &kp W                &kp E                    &kp R                  &kp T        &kp Y         &kp U                  &kp I                    &kp O                &kp P                         &kp BACKSPACE
&kp TAB     &HOMEROW LEFT_META A  &HOMEROW LEFT_ALT S  &HOMEROW LEFT_CONTROL D  &HOMEROW LEFT_SHIFT F  &kp G        &kp H         &HOMEROW LEFT_SHIFT J  &HOMEROW LEFT_CONTROL K  &HOMEROW LEFT_ALT L  &HOMEROW LEFT_META SEMICOLON  &M_QUOTE
&kp LCTRL   &kp Z                 &kp X                &kp C                    &kp V                  &kp B        &kp N         &kp M                  &kp COMMA                &kp DOT              &kp FSLH                      &kp RET
                                                       &lt 0 ESCAPE             &lt 0 SPACE            &lt 1 TAB    &lt 2 RETURN  &lt 0 BACKSPACE        &lt 0 DELETE
>;
        };

        NUM {
            bindings = <
&trans  &kp EQUAL           &kp N7                   &kp N8                  &kp N9                        &kp ASTRK    &kp ASTERISK  &kp N7   &kp N8    &kp N9  &kp K_COPY   &trans
&trans  &HOMEROW LC(X) DOT  &HOMEROW LC(V) NUMBER_4  &HOMEROW LC(N5) LC(N5)  &HOMEROW LEFT_SHIFT NUMBER_6  &kp MINUS    &kp MINUS     &kp N4   &kp N5    &kp N6  &trans       &trans
&trans  &kp N0              &kp NUMBER_1             &kp N2                  &kp N3                        &kp EQUAL    &kp EQUAL     &kp N1   &kp N2    &kp N3  &kp K_PASTE  &trans
                                                     &trans                  &trans                        &trans       &kp N0        &kp DOT  &kp BSLH
>;
        };NUM_ALT {
         bindings = <
&trans  &kp EXCLAMATION              &kp AT                      &kp HASH                        &kp DOLLAR                    &kp PERCENT    &M_CARET       &kp AMPS                &kp ASTRK                 &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &HOMEROW LEFT_META NUMBER_1  &HOMEROW LEFT_ALT NUMBER_2  &HOMEROW LEFT_CONTROL NUMBER_3  &HOMEROW LEFT_SHIFT NUMBER_4  &kp N5         &kp N6         &HOMEROW LEFT_SHIFT N7  &HOMEROW LEFT_CONTROL N8  &HOMEROW LEFT_ALT N9  &HOMEROW LEFT_META N0  &trans
&trans  &M_TILDE                     &M_GRAVE                    &kp LEFT_BRACKET                &kp RIGHT_BRACKET             &kp PIPE       &kp BACKSLASH  &kp LEFT_BRACE          &kp RIGHT_BRACE           &M_QUOTE              &M_DQUOTE              &trans
                                                                 &kp PLUS                        &kp EQUAL                     &kp MINUS      &trans         &trans                  &trans
>;};
    };
};
