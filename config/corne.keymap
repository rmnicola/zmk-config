/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        JK {
            bindings = <&lt 1 ESCAPE>;
            key-positions = <19 20>;
            layers = <0>;
        };

        FD {
            bindings = <&lt 1 RET>;
            key-positions = <16 15>;
            layers = <0>;
        };

        FG {
            bindings = <&mo 6>;
            key-positions = <16 17>;
            layers = <0 6 1>;
        };

        DELETEE {
            bindings = <&kp DELETE>;
            key-positions = <39 11>;
            layers = <0>;
        };

        DELWORD {
            bindings = <&kp LC(RC(BACKSPACE))>;
            key-positions = <38 39>;
        };

        CARET_LEFT {
            bindings = <&mo 5>;
            key-positions = <38 12>;
            layers = <0>;
        };

        CARET_RIGHT {
            bindings = <&mo 5>;
            key-positions = <39 23>;
            layers = <0>;
        };

        CARET_LR {
            bindings = <&mo 5>;
            key-positions = <23 38>;
            layers = <0>;
        };

        CARET_RL {
            bindings = <&mo 5>;
            key-positions = <39 12>;
            layers = <0>;
        };
    };

    behaviors {
        TAPMOD: TAPMOD {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPMOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <200>;
        };

        TILDE_LAYER: TILDE_LAYER {
            compatible = "zmk,behavior-hold-tap";
            label = "TILDE_LAYER";
            bindings = <&mo>, <&M_QUOTE>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        M_QUOTE: QUOTES {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS &kp SPACE>;
            label = "QUOTES";
        };

        M_CARET: M_CARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "M_CARET";
        };

        M_GRAVE: M_GRAVE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "M_GRAVE";
        };

        ATILDE: ATILDE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp A>;
            label = "ATILDE";
        };

        ACARET: ACARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp A>;
            label = "ACARET";
        };

        ECARET: ECARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp E>;
            label = "ECARET";
        };

        OCARET: OCARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp O>;
            label = "OCARET";
        };

        OTILDE: OTILDE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp O>;
            label = "OTILDE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&lt 3 TAB     &kp Q                   &kp W                &kp E               &kp R                       &kp T                       &kp Y                     &kp U                   &kp I                &kp O                 &kp P                            &lt 3 MINUS
&lt 4 ESCAPE  &TAPMOD LEFT_CONTROL A  &TAPMOD LEFT_META S  &TAPMOD LEFT_ALT D  &TAPMOD LEFT_SHIFT F        &kp G                       &kp H                     &TAPMOD LEFT_SHIFT J    &TAPMOD RIGHT_ALT K  &TAPMOD RIGHT_META L  &TAPMOD RIGHT_CONTROL SEMICOLON  &TILDE_LAYER 4 0
&kp LCTRL     &kp Z                   &kp X                &kp C               &kp V                       &kp B                       &kp N                     &kp M                   &kp COMMA            &kp DOT               &kp FSLH                         &kp RET
                                                           &lt 1 ESCAPE        &TAPMOD LEFT_CONTROL SPACE  &mt LEFT_SHIFT BACKSPACE    &mt LEFT_SHIFT BACKSPACE  &TAPMOD LEFT_ALT SPACE  &lt 2 RETURN
            >;
        };

        SIMBOLOS {
            bindings = <
&M_GRAVE  &kp EXCLAMATION  &kp AT  &kp HASH  &kp DOLLAR  &kp MINUS    &M_CARET              &kp AMPERSAND          &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&trans    &kp N1           &kp N2  &kp N3    &kp N4      &kp N5       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN  &kp GREATER_THAN      &kp BACKSLASH          &trans
&trans    &kp N6           &kp N7  &kp N8    &kp N9      &kp N0       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS       &kp MINUS             &trans                 &kp LS(BACKSLASH)
                                   &trans    &trans      &trans       &trans                &trans                 &trans
            >;
        };

        CONTROLES {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7          &kp F8        &kp F9          &kp F10          &kp F11          &kp F12
&none       &none         &none         &kp LA(F4)    &none         &none           &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp K_MUTE       &kp LA(LC(DELETE))
&bt BT_CLR  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &out OUT_TOG    &kp HOME        &kp PG_UP     &kp PAGE_DOWN   &kp END          &kp PRINTSCREEN  &kp LS(DELETE)
                                        &trans        &trans        &trans          &trans          &trans        &trans
            >;
        };

        AGUDO {
            bindings = <
&kp GRAVE  &trans     &trans  &kp RA(E)  &trans  &trans    &trans  &kp RA(U)  &kp RA(I)  &kp RA(O)  &trans         &trans
&trans     &kp RA(A)  &trans  &trans     &trans  &trans    &trans  &trans     &trans     &trans     &kp RA(COMMA)  &trans
&trans     &trans     &trans  &trans     &trans  &trans    &trans  &trans     &trans     &trans     &trans         &trans
                              &trans     &trans  &trans    &trans  &trans     &trans
            >;
        };

        TIL {
            bindings = <
&kp GRAVE  &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &OTILDE  &trans         &trans
&trans     &ATILDE  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &kp RA(COMMA)  &trans
&trans     &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans         &trans
                            &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        CIRCUNFLEXO {
            bindings = <
&kp GRAVE  &trans   &trans  &ECARET  &trans  &trans    &trans  &trans  &trans  &OCARET  &trans         &trans
&trans     &ACARET  &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans   &kp RA(COMMA)  &trans
&trans     &trans   &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans   &trans         &trans
                            &trans   &trans  &trans    &trans  &trans  &trans
            >;
        };

        NUMPAD {
            bindings = <
&none  &none  &none  &none  &none   &none     &kp N7  &kp N8   &kp N9    &kp MINUS  &none  &kp BSPC
&none  &none  &none  &none  &none   &none     &kp N4  &kp N5   &kp N6    &kp PLUS   &none  &none
&none  &none  &none  &none  &none   &none     &kp N1  &kp N2   &kp N3    &kp ENTER  &none  &kp ENTER
                     &none  &trans  &trans    &kp N0  &kp DOT  &kp BSPC
            >;
        };
    };
};
